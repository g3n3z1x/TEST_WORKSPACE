package com.codewars.test;

import java.util.function.IntPredicate;
import java.util.stream.IntStream;

// Prime Streaming
// 2 kyu
public class Primes {

	public static void main(String[] args) {
		stream();
	}
	
	public static IntStream stream() {
        IntPredicate isPrime = (n) -> n > 1 && IntStream.rangeClosed(2, (int) Math.sqrt(n)).noneMatch(i -> n % i == 0);
        return IntStream.iterate(2, i -> i + 1).filter(isPrime);
    } 

	public static IntStream stream2() {
		// int max = 50000000;
		return IntStream.iterate(2, i -> i + 1).filter(x -> intIsPrime(x));
	}

	public static boolean intIsPrime(int x) {
		return IntStream.rangeClosed(2, (int) (Math.sqrt(x))).noneMatch(n -> x % n == 0);
	}

	/*
	 * old slower version public static boolean isPrime(int x) { for (int n = 2; n
	 * <= Math.sqrt(x); n++) { if (x % n == 0) { return false; } } return true; }
	 */

	/*
	 * rangeClosed version public static IntStream stream2() { return
	 * IntStream.rangeClosed(2, 50000000) .filter(i -> IntStream.rangeClosed(2,
	 * (int) Math.sqrt(i)).allMatch(j -> i % j != 0)); }
	 */

	/*
	 * long version public static LongStream primeSequence(long max) { return
	 * LongStream.iterate(2, i -> i + 1).filter(x -> longIsPrime(x)).limit(max); }
	 * 
	 * public static boolean longIsPrime(long x) { return LongStream.rangeClosed(2,
	 * (long) (Math.sqrt(x))).allMatch(n -> x % n != 0); }
	 */

}
