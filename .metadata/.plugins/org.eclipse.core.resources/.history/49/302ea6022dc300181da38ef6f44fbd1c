package com.codewars.test.go.game.send;

import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.regex.Pattern;

import com.codewars.test.go.game.Board;

public class Go {

	private Board board;
	private boolean isBlackTurn;
	private boolean isHandicap;

	public Go(int size) {
		board = new Board(size, size);
		setBlackTurn(true);
		setHandicap(false);
	}

	public Go(int sizeY, int sizeX) {
		board = new Board(sizeY, sizeX);
		setBlackTurn(true);
		setHandicap(false);
	}

	public void printBoard() {
		board.printBoard();
	}

	public void move(String coordinate) {
		try {
			board.move(coordinate, isBlackTurn);
			setBlackTurn(!isBlackTurn);
		} catch (IllegalArgumentException e) {
			throw new IllegalArgumentException(e.getMessage());
		}
	}

	public void move(String... coordinate) {
		for (int i = 0; i < coordinate.length; i++) {
			try {
				board.move(coordinate[i], isBlackTurn);
				setBlackTurn(!isBlackTurn);
			} catch (IllegalArgumentException e) {
				throw new IllegalArgumentException(e.getMessage());
			}
		}
	}

	public String getTurn() {
		return isBlackTurn ? "black" : "white";
	}

	public void passTurn() {
		setBlackTurn(!isBlackTurn);
		board.recordHistory();
	}

	public void reset() {
		setBlackTurn(true);
		setHandicap(false);
		board.initialize();
	}

	public void rollBack(int i) {
		System.out.println("Rollback for " + i + " turns");
		board.rollback(i);
		if (i % 2 != 0) {
			isBlackTurn = !isBlackTurn;
		}
	}

	public SortedMap<String, Integer> getSize() {
		SortedMap<String, Integer> size = new TreeMap<String, Integer>();
		size.put("width", board.getWidth());
		size.put("height", board.getHeight());
		return size;
	}

	public void handicapStones(int handicapStones) {
		if (isHandicap()) {
			throw new IllegalArgumentException("Handicap stones have already been set.");
		} else if (board.getHistory().size() > 1) {
			throw new IllegalArgumentException("Handicap cannot be set on a game already started.");
		} else if (handicapStones < 1) {
			throw new IllegalArgumentException("Handicap stones must be greater than 0.");
		} else if (board.getHeight() == board.getWidth() && (board.getHeight() == 9 || board.getHeight() == 13 || board.getHeight() == 19)) {
			board.placeHandicapStones(board.getHeight(), handicapStones);
			setHandicap(true);
		} else {
			setHandicap(false);
			throw new IllegalArgumentException("Can't place handicap stones on this board's size.");
		}
	}

	// G&S
	public boolean isBlackTurn() {
		return isBlackTurn;
	}

	public void setBlackTurn(boolean isBlackTurn) {
		this.isBlackTurn = isBlackTurn;
	}

	public char[][] getBoard() {
		return board.getBoard();
	}

	public void setBoard(Board board) {
		this.board = board;
	}

	public boolean isHandicap() {
		return isHandicap;
	}

	public void setHandicap(boolean isHandicap) {
		this.isHandicap = isHandicap;
	}

	public String getPosition(String coord) {
		return board.getPosition(coord) + "";
	}
	
	

	public static class Stone {

		private static final char empty = '.';
		private static final char white = 'o';
		private static final char black = 'x';
		private static final char liberty = 'l';

		public Stone() {
		};

		// G&S
		public static char getEmpty() {
			return empty;
		}

		public static char getWhite() {
			return white;
		}

		public static char getBlack() {
			return black;
		}

		public static char getLiberty() {
			return liberty;
		}

	}

}
