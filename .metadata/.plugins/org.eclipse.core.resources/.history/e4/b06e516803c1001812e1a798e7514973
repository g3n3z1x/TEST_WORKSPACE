package com.codewars.test;

import java.util.function.IntSupplier;
import java.util.stream.IntStream;
import java.util.stream.LongStream;

// Prime Streaming
// 2 kyu
public class Primes {

	public static void main(String[] args) {
		stream();
	}
	
	public static IntStream stream() {
		return IntStream.generate(new IntSupplier() {
			int lastSeen = 1;
			public int getAsInt() {
				int i = lastSeen;
				while(!isPrime(++i)) {}
				lastSeen = i;
				return i;
			}
		});
	}
	
	public static boolean isPrime(int i) {
		if(i==1) return false;
		if(i==2 ||i==3 ||i==5 ||i==7 ||i==11 ||i==13 ||i==17 ||i==19) return true;
		if(i%2==0 || i%3==0) return false;
		int endp = (int) Math.ceil(Math.sqrt(i)/6)+2;
		for (int m = 0; m <= endp; m++) {
			if(i%(6*m+1)==0 || i%(6*m-1)==0) return false;
		}
		return true;
	}

//	public static IntStream stream() {
//		// int max = 50000000;
//		return IntStream.iterate(2, i -> i + 1).filter(x -> intIsPrime(x));
//	}
//
//	public static boolean intIsPrime(int x) {
//		return IntStream.rangeClosed(2, (int) (Math.sqrt(x))).allMatch(n -> x % n == 0);
//	}
//
//	public static boolean isPrime(int x) {
//		for (int n = 2; n <= Math.sqrt(x); n++) {
//			if (x % n == 0) {
//				return false;
//			}
//		}
//		return true;
//	}

	/* long version 
	public static LongStream primeSequence(long max) {
		return LongStream.iterate(2, i -> i + 1).filter(x -> longIsPrime(x)).limit(max);
	}

	public static boolean longIsPrime(long x) {
		return LongStream.rangeClosed(2, (long) (Math.sqrt(x))).allMatch(n -> x % n != 0);
	}*/

}
